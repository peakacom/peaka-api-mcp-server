{
  "openapi": "3.0.1",
  "info": {
    "title": "Peaka Gateway API",
    "description": "Peaka Gateway API Documentation",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://partner.peaka.studio/api/v1",
      "description": "Default Server URL (US Zone)"
    },
    {
      "url": "https://partner.eu.peaka.studio/api/v1",
      "description": "EU Zone"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/organizations": {
      "get": {
        "tags": ["Organization -- Organizations"],
        "summary": "List Organizations",
        "description": "Retrieves all the organizations accessible by the authenticated user.\n\nAn Organization is the highest-level resource that can contain multiple Workspaces.\n",
        "operationId": "listOrganizations",
        "responses": {
          "200": {
            "description": "List of Organizations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                },
                "examples": {
                  "List Organizations Example": {
                    "description": "List Organizations Example",
                    "value": [
                      {
                        "id": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef",
                        "name": "ABC Organization",
                        "owner": "1673d60f-a0ea-41f4-9420-c91dbc2864f5",
                        "createdAt": "2025-03-25T12:28:48.737355Z",
                        "iconFileId": null,
                        "description": "Default Organization"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}": {
      "get": {
        "tags": ["Organization -- Organizations"],
        "summary": "Read Organization",
        "description": "Returns the specified Organization.\n\nAn Organization is the highest-level resource that can contain multiple Workspaces.\n",
        "operationId": "getOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Read Organization Example": {
                    "description": "Read Organization Example",
                    "value": {
                      "id": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef",
                      "name": "ABC Organization",
                      "owner": "1673d60f-a0ea-41f4-9420-c91dbc2864f5",
                      "createdAt": "2025-03-25T12:28:48.737355Z",
                      "iconFileId": null,
                      "description": "Default Organization"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/workspaces": {
      "get": {
        "tags": ["Organization -- Workspaces"],
        "summary": "List Workspaces",
        "description": "Returns all workspaces under the specified Organization.\n\nA Workspace is a collaborative environment within an Organization that groups Projects together. It facilitates team collaboration, resource management, and organization of data operations.\n\nThe hierarchical structure in Peaka is:\n\n<code>Organization (top-level) → Workspace → Project</code>\n\nProjects contain data catalogs and workflows that teams manage within a Workspace.\n",
        "operationId": "listWorkspaces",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Workspaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "List Workspace Example": {
                    "description": "List Workspace Example",
                    "value": [
                      {
                        "id": "56d43968-e31d-4010-9b75-018a79a51b17",
                        "name": "workspace 1",
                        "createdBy": "1673d60f-a0ea-41f4-9420-c91dbc2864f5",
                        "organizationId": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef",
                        "description": "sample description",
                        "createdAt": "2025-04-17T08:08:15.687751Z",
                        "defaultWorkspace": false
                      },
                      {
                        "id": "78cf8c83-8569-4d7c-a1ce-404dee7c5c6b",
                        "name": "workspace 2",
                        "createdBy": "1673d60f-a0ea-41f4-9420-c91dbc2864f5",
                        "organizationId": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef",
                        "description": "sample description",
                        "createdAt": "2025-04-17T08:05:58.312996Z",
                        "defaultWorkspace": false
                      },
                      {
                        "id": "eaa442d7-82ac-4a65-b302-093d0465eb67",
                        "name": "Default Workspace",
                        "createdBy": "1673d60f-a0ea-41f4-9420-c91dbc2864f5",
                        "organizationId": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef",
                        "description": "Default Workspace",
                        "createdAt": "2025-03-25T12:28:51.147125Z",
                        "defaultWorkspace": true
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Organization -- Workspaces"],
        "summary": "Create Workspace",
        "description": "The endpoint allows you to create a new Workspace within an Organization.\n\nA Workspace is a collaborative environment within an Organization that groups Projects together. It facilitates team collaboration, resource management, and organization of data operations.\n\nThe hierarchical structure in Peaka is:\n\n<code>Organization (top-level) → Workspace → Project</code>\n\nProjects contain data catalogs and workflows that teams manage within a Workspace.\n",
        "operationId": "createWorkspace",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef"
          }
        ],
        "requestBody": {
          "description": "Create Workspace",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRequest"
              },
              "examples": {
                "Create Workspace Example": {
                  "description": "Create Workspace Example",
                  "value": {
                    "name": "workspace 1",
                    "description": "workspace description"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "Create Workspace Example": {
                    "description": "Create Workspace Example",
                    "value": {
                      "id": "8eefb5a9-59f7-43cc-bacb-f0b0e0d1b0ea",
                      "name": "workspace 1",
                      "createdBy": "1673d60f-a0ea-41f4-9420-c91dbc2864f5",
                      "organizationId": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef",
                      "description": "workspace description",
                      "createdAt": null,
                      "defaultWorkspace": false
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/workspaces/{workspaceId}": {
      "get": {
        "tags": ["Organization -- Workspaces"],
        "summary": "Read Workspace",
        "description": "Returns details of a specified Workspace, which is a collaborative environment within an Organization that groups Projects together.\n\nA Workspace facilitates team collaboration, resource management, and organization of data operations.\n\nThe hierarchical structure in Peaka is:\n\n<code>Organization (top-level) → Workspace → Project</code>\n\nProjects contain data catalogs and workflows that teams manage within a Workspace.\n",
        "operationId": "getWorkspace",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef"
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "Read Workspace example": {
                    "description": "Read Workspace example",
                    "value": {
                      "id": "8eefb5a9-59f7-43cc-bacb-f0b0e0d1b0ea",
                      "name": "workspace 1",
                      "createdBy": "1673d60f-a0ea-41f4-9420-c91dbc2864f5",
                      "organizationId": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef",
                      "description": "workspace description",
                      "createdAt": null,
                      "defaultWorkspace": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Organization -- Workspaces"],
        "summary": "Update Workspace",
        "description": "Updates the specified Workspace within an Organization.\n\nA Workspace is a collaborative environment within an Organization that groups Projects together, facilitating team collaboration and resource management.\n\nThe hierarchical structure in Peaka is:\n\n<code>Organization (top-level) → Workspace → Project</code>\n\nProjects contain data catalogs and workflows that teams manage within a Workspace.\n",
        "operationId": "updateWorkspace",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef"
          },
          {
            "name": "workspaceId",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8eefb5a9-59f7-43cc-bacb-f0b0e0d1b0ea"
          }
        ],
        "requestBody": {
          "description": "Create Workspace",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceRequest"
              },
              "examples": {
                "Create Workspace Example": {
                  "description": "Create Workspace Example",
                  "value": {
                    "name": "workspace new name",
                    "description": "workspace description"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "Update Workspace Example": {
                    "description": "Update Workspace Example",
                    "value": {
                      "id": "8eefb5a9-59f7-43cc-bacb-f0b0e0d1b0ea",
                      "name": "workspace new name",
                      "createdBy": "1673d60f-a0ea-41f4-9420-c91dbc2864f5",
                      "organizationId": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef",
                      "description": "workspace description",
                      "createdAt": null,
                      "defaultWorkspace": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Organization -- Workspaces"],
        "summary": "Delete Workspace",
        "description": "Deletes a specified Workspace within an Organization.\n\nA Workspace is a collaborative environment that groups Projects to facilitate team collaboration and resource management.\n\nThe hierarchical structure in Peaka is:\n\n<code>Organization (top-level) → Workspace → Project</code>\n",
        "operationId": "deleteWorkspace",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "d0d3c83f-29ed-4f2e-899d-1bfa00eb3cef"
          },
          {
            "name": "workspaceId",
            "in": "path",
            "description": "Workspace ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8eefb5a9-59f7-43cc-bacb-f0b0e0d1b0ea"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/organizations/{organizationId}/workspaces/{workspaceId}/projects": {
      "get": {
        "tags": ["Organization -- Projects"],
        "summary": "List Projects",
        "description": "Fetches all projects within the given Workspace.\n\nA unit of work where queries, data tables, and semantic catalogs are managed. Projects live inside workspaces.\n",
        "operationId": "listProjects_1",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                },
                "examples": {
                  "List of all projects": {
                    "description": "List of all projects",
                    "value": [
                      {
                        "id": "SksnYuxH",
                        "name": "Anapp23334",
                        "description": null,
                        "domain": "anapp2-rfto",
                        "webhookBaseUrl": "https://anapp2-rfto--test.api.peaka.host",
                        "createdAt": "2023-08-21T11:09:04.699714310Z",
                        "workspaceId": "d7f282d2-b392-4b5c-8cea-05f7523df2d2"
                      },
                      {
                        "id": "0IQ6f4QB",
                        "name": "App Deneme",
                        "description": null,
                        "domain": "appdeneme-wmdp",
                        "webhookBaseUrl": "https://appdeneme-wmdp--test.api.peaka.host",
                        "createdAt": "2023-12-14T12:38:55.025274418Z",
                        "workspaceId": "d7f282d2-b392-4b5c-8cea-05f7523df2d2"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Organization -- Projects"],
        "summary": "Create Project",
        "operationId": "createProject_1",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Project to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              },
              "examples": {
                "Create Project Example": {
                  "description": "Create Project Example",
                  "value": {
                    "name": "Sample Project Name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Create Project Example": {
                    "description": "Create Project Example",
                    "value": {
                      "id": "URNg0GIj",
                      "name": "Sample Project Name",
                      "description": "Non accusantium ducimus accusantium. Laborum eum accusamus sit sit hic eaque doloremque. Occaecati blanditiis facere consequuntur consectetur culpa reiciendis hic tempore dolorem. Saepe impedit nam necessitatibus maxime numquam voluptatum cum. Adipisci mollitia blanditiis sint inventore ex commodi occaecati ipsam quas.",
                      "domain": "sampleprojectname-cdcn",
                      "webhookBaseUrl": "https://sampleprojectname-cdcn--test.api.peaka.host",
                      "createdAt": "2024-09-10T10:11:02.385253956Z",
                      "workspaceId": "d7f282d2-b392-4b5c-8cea-05f7523df2d2"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}": {
      "get": {
        "tags": ["Organization -- Projects"],
        "summary": "Read Project",
        "operationId": "readProject_1",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Read Project Example": {
                    "description": "Read Project Example",
                    "value": {
                      "id": "SksnYuxH",
                      "name": "Anapp23334",
                      "description": null,
                      "domain": "anapp2-rfto",
                      "webhookBaseUrl": "https://anapp2-rfto--test.api.peaka.host",
                      "createdAt": "2023-08-21T11:09:04.699714310Z",
                      "workspaceId": "d7f282d2-b392-4b5c-8cea-05f7523df2d2"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Organization -- Projects"],
        "summary": "Update Project",
        "operationId": "updateProject_1",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Project to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              },
              "examples": {
                "Update Project Example": {
                  "description": "Update Project Example",
                  "value": {
                    "name": "Updated Project Name",
                    "description": "Iste aut quo maxime dolorem atque. Alias neque porro. Fugiat ipsam similique voluptate quam libero deserunt consequuntur dolorum nobis."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Update Project Example": {
                    "description": "Update Project Example",
                    "value": {
                      "id": "URNg0GIj",
                      "name": "Updated Project Name",
                      "description": "Iste aut quo maxime dolorem atque. Alias neque porro. Fugiat ipsam similique voluptate quam libero deserunt consequuntur dolorum nobis.",
                      "domain": "sampleprojectname-cdcn",
                      "webhookBaseUrl": null,
                      "createdAt": "2024-09-10T10:11:02.385253956Z",
                      "workspaceId": "d7f282d2-b392-4b5c-8cea-05f7523df2d2"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Organization -- Projects"],
        "summary": "Delete Project",
        "operationId": "deleteProject_1",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "tags": ["Projects (Deprecated)"],
        "summary": "List Projects",
        "operationId": "listProjects",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                },
                "examples": {
                  "List of all projects": {
                    "description": "List of all projects",
                    "value": [
                      {
                        "id": "SksnYuxH",
                        "name": "Anapp23334",
                        "description": null,
                        "domain": "anapp2-rfto",
                        "webhookBaseUrl": "https://anapp2-rfto--test.api.peaka.host",
                        "createdAt": "2023-08-21T11:09:04.699714310Z"
                      },
                      {
                        "id": "0IQ6f4QB",
                        "name": "App Deneme",
                        "description": null,
                        "domain": "appdeneme-wmdp",
                        "webhookBaseUrl": "https://appdeneme-wmdp--test.api.peaka.host",
                        "createdAt": "2023-12-14T12:38:55.025274418Z"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Projects (Deprecated)"],
        "summary": "Create Project",
        "operationId": "createProject",
        "requestBody": {
          "description": "Project to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              },
              "examples": {
                "Create Project Example": {
                  "description": "Create Project Example",
                  "value": {
                    "name": "Sample Project Name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Create Project Example": {
                    "description": "Create Project Example",
                    "value": {
                      "id": "URNg0GIj",
                      "name": "Sample Project Name",
                      "description": "Non accusantium ducimus accusantium. Laborum eum accusamus sit sit hic eaque doloremque. Occaecati blanditiis facere consequuntur consectetur culpa reiciendis hic tempore dolorem. Saepe impedit nam necessitatibus maxime numquam voluptatum cum. Adipisci mollitia blanditiis sint inventore ex commodi occaecati ipsam quas.",
                      "domain": "sampleprojectname-cdcn",
                      "webhookBaseUrl": "https://sampleprojectname-cdcn--test.api.peaka.host",
                      "createdAt": "2024-09-10T10:11:02.385253956Z"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/projects/{projectId}": {
      "get": {
        "tags": ["Projects (Deprecated)"],
        "summary": "Read Project",
        "operationId": "readProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Read Project Example": {
                    "description": "Read Project Example",
                    "value": {
                      "id": "SksnYuxH",
                      "name": "Anapp23334",
                      "description": null,
                      "domain": "anapp2-rfto",
                      "webhookBaseUrl": "https://anapp2-rfto--test.api.peaka.host",
                      "createdAt": "2023-08-21T11:09:04.699714310Z"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "put": {
        "tags": ["Projects (Deprecated)"],
        "summary": "Update Project",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Project to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequest"
              },
              "examples": {
                "Update Project Example": {
                  "description": "Update Project Example",
                  "value": {
                    "name": "Updated Project Name",
                    "description": "Iste aut quo maxime dolorem atque. Alias neque porro. Fugiat ipsam similique voluptate quam libero deserunt consequuntur dolorum nobis."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                },
                "examples": {
                  "Update Project Example": {
                    "description": "Update Project Example",
                    "value": {
                      "id": "URNg0GIj",
                      "name": "Updated Project Name",
                      "description": "Iste aut quo maxime dolorem atque. Alias neque porro. Fugiat ipsam similique voluptate quam libero deserunt consequuntur dolorum nobis.",
                      "domain": "sampleprojectname-cdcn",
                      "webhookBaseUrl": null,
                      "createdAt": "2024-09-10T10:11:02.385253956Z"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Projects (Deprecated)"],
        "summary": "Delete Project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted"
          }
        },
        "deprecated": true
      }
    },
    "/projects/{projectId}/apiKeys": {
      "get": {
        "tags": ["Projects -- Api Key"],
        "summary": "List API Keys",
        "operationId": "listApiKeys",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Projects -- Api Key"],
        "summary": "Create API Key",
        "operationId": "createApiKey",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "requestBody": {
          "description": "API Key request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyRequest"
              },
              "examples": {
                "API Key Request": {
                  "description": "API Key Request",
                  "value": {
                    "name": "test"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API Key created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKey"
                },
                "examples": {
                  "API Key": {
                    "description": "API Key",
                    "value": {
                      "name": "test",
                      "apiKey": "TtgGcQFq.s3fzROFoop8uHG4pS2LYhoqn1rLb6oW6",
                      "apiKeyId": "21fd1a8d-88d5-4295-b792-5b2113138057"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/apiKeys/{apiKeyId}": {
      "delete": {
        "tags": ["Projects -- Api Key"],
        "summary": "Delete API Key",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "description": "API Key ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "21fd1a8d-88d5-4295-b792-5b2113138057"
          }
        ],
        "responses": {
          "200": {
            "description": "API Key deleted"
          }
        }
      }
    },
    "/connections/config": {
      "get": {
        "tags": ["Connections"],
        "summary": "List Connection Config",
        "description": "List all connection configurations.\nThis will return a list of all connection configurations available in the system.",
        "operationId": "listConnectionConfig",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionConfiguration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connections/config/{connectionType}": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get Connection Config",
        "operationId": "getConnectionConfig",
        "parameters": [
          {
            "name": "connectionType",
            "in": "path",
            "description": "Type of connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "hubspot"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/connections/{projectId}": {
      "get": {
        "tags": ["Connections"],
        "summary": "List Connections",
        "description": "List all connections for a project",
        "operationId": "listConnections",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "List Connections": {
                    "description": "Sample List of Connections",
                    "value": [
                      {
                        "id": "c6883de8-78ab-49fb-93c0-70a13652a341",
                        "name": "Stripe Code2",
                        "type": "stripe"
                      },
                      {
                        "id": "81e6dfd0-4c88-4e81-a28b-422e89cc07c7",
                        "name": "airtable",
                        "type": "airtable"
                      },
                      {
                        "id": "8db17e23-29de-4dab-8886-af9717e0e742",
                        "name": "airtable2",
                        "type": "airtable"
                      },
                      {
                        "id": "22706960-023c-411e-a3ac-62d286fa6685",
                        "name": "exampleAirtableConnection",
                        "type": "airtable"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Connections"],
        "summary": "Create Connection",
        "description": "This endpoint allows you to create a new connection for a specified project.\n\nYou need to provide the project ID and the connection details in the request body.\n\nThe connection details include the name, type, and credentials required for the connection.\n\nDepending on the connection type, additional parameters may be required under credentials.\n\nYou can view the list of supported connection types by calling the /connections/config endpoint.\n\nYou can switch examples from the second dropdown of the sample request component. (cURL (first dropdown) - Stripe Connection Request (second dropdown))\n\n**Note**: Typically, the connection creation process involves the following steps:\n1. First, learn about the connection type and the required parameters by calling the /connections/config endpoint.\n2. Create a connection request with the required parameters.\n3. If the connection requires Oauth2 authorization, there may be additional steps to follow. See https://docs.peaka.com/how-to-guides/how-to-create-oauth2-based-connections-via-peaka for more information.\n\n**Example**:\n- POSTGRES Connection Configuration:\n\nGET /connections/config endpoint displays all of the connection types.\n\nGET /connection/config/POSTGRES endpoint displays the POSTGRES connection configuration.\n\nThe definition of the POSTGRES connection configuration is as follows:\n``` json\n    {\n        \"connectionType\": \"POSTGRES\",\n        \"connectionTypeLabel\": \"PostgreSQL\",\n        \"name\": \"PostgreSQL\",\n        \"authorizationType\": \"custom\",\n        \"credentialSchemaType\": \"postgres_credential_schema\",\n        \"category\": \"Database\",\n        \"configuration\": [\n            {\n                \"fieldName\": \"url\",\n                \"fieldType\": \"text\",\n                \"required\": true,\n                \"description\": \"URL\"\n            },\n            {\n                \"fieldName\": \"port\",\n                \"fieldType\": \"number\",\n                \"required\": true,\n                \"description\": \"Port\"\n            },\n            {\n                \"fieldName\": \"user\",\n                \"fieldType\": \"text\",\n                \"required\": true,\n                \"description\": \"User\"\n            },\n            {\n                \"fieldName\": \"password\",\n                \"fieldType\": \"text\",\n                \"required\": true,\n                \"description\": \"Password\"\n            },\n            {\n                \"fieldName\": \"databaseName\",\n                \"fieldType\": \"text\",\n                \"required\": true,\n                \"description\": \"Database Name\"\n            },\n            {\n                \"fieldName\": \"useSsl\",\n                \"fieldType\": \"boolean\",\n                \"required\": true,\n                \"description\": \"Use SSL\"\n            }\n        ],\n        \"documentationUrl\": \"https://docs.peaka.com/integrations/postgresql\"\n    }\n```\n\nAccording to the POSTGRES connection configuration, the connection request should include the following parameters (respecting to the required flag):\n- url: URL of the host IP or domain\n- port: Port number\n- user: User of the database\n- password: Password of the user\n- databaseName: Name of the database\n- useSsl: Boolean value to indicate whether to use SSL\n\n``` json\n{\n    \"name\": \"examplePostgre\",\n    \"type\": \"POSTGRES\",\n    \"credential\": {\n        \"url\": \"<host ip or domain>\",\n        \"port\": 5432,\n        \"user\": \"userOfYourDB\",\n        \"password\": \"passwordOfUser\",\n        \"databaseName\": \"yourDBName\",\n        \"useSsl\": false\n    }\n}\n```\n\n",
        "operationId": "createConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "requestBody": {
          "description": "Connection Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionRequest"
              },
              "examples": {
                "Stripe Connection Request": {
                  "description": "Sample Stripe Connection parameters",
                  "value": {
                    "name": "exampleStripeConnection21",
                    "type": "stripe",
                    "credential": {
                      "token": "<stripeToken>"
                    }
                  }
                },
                "Connection (Oauth2) Request With Redirect Url ": {
                  "description": "Sample Oauth2 Connection with redirect url parameters",
                  "value": {
                    "name": "exampleOauthConnection",
                    "type": "google_analytics",
                    "credential": {
                      "clientId": "<googleOauthAppClientId>",
                      "clientSecret": "<googleOauthAppClientSecret>"
                    },
                    "connectionCallback": "<connectionCallbackUrl>"
                  }
                },
                "HubSpot Connection (Oauth2) Request": {
                  "description": "Sample HubSpot Connection parameters",
                  "value": {
                    "name": "exampleHubspotConnection",
                    "type": "hubspot",
                    "credential": {
                      "clientId": "<hubspotOauthAppClientId>",
                      "clientSecret": "<hubspotOauthAppClientSecret>",
                      "refreshToken": "<OauthRefreshToken>"
                    }
                  }
                },
                "AirTable Connection Request": {
                  "description": "Sample AirTable Connection parameters",
                  "value": {
                    "name": "exampleAirtableConnection",
                    "type": "airtable",
                    "credential": {
                      "personalAccessToken": "<yourAirtableApiKey>"
                    }
                  }
                },
                "PostgreSQL Connection Request": {
                  "description": "PostgreSQL Connection Request",
                  "value": {
                    "name": "examplePostgre",
                    "type": "POSTGRES",
                    "credential": {
                      "url": "<host ip or domain>",
                      "port": 5432,
                      "user": "userOfYourDB",
                      "password": "passwordOfUser",
                      "databaseName": "yourDBName",
                      "useSsl": false
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "Successful Stripe Connection": {
                    "description": "Sample Stripe Connection",
                    "value": {
                      "id": "6243f42a-42d0-4821-a90f-763cda6cda50",
                      "name": "exampleStripeConnection21",
                      "type": "stripe"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connections/{projectId}/oauth2": {
      "post": {
        "tags": ["Connections"],
        "summary": "Oauth2 Callback",
        "description": "This callback/webhook is used while creating a new connection with Oauth2. See https://docs.peaka.com/how-to-guides/how-to-create-oauth2-based-connections-via-peaka for more information.",
        "operationId": "oauth2Callback",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "requestBody": {
          "description": "Oauth2 Callback Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Oauth2Callback"
              },
              "examples": {
                "Oauth2 Callback Request": {
                  "description": "Oauth2 Callback Request",
                  "value": {
                    "queryParameters": "code=1234&state=xyz&param1=value1&param2=value2"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Connection created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "Successful Oauth2 Connection": {
                    "description": "Sample Google Analytics Connection",
                    "value": {
                      "id": "6243f42a-42d0-4821-a90f-763cda6cda50",
                      "name": "exampleOauth2Connection",
                      "type": "google_analytics"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/connections/{projectId}/{connectionId}": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get Connection",
        "description": "Get a connection by ID",
        "operationId": "getConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "ID of the connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Connection by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                },
                "examples": {
                  "Airtable Connection": {
                    "description": "Sample Airtable Connection",
                    "value": {
                      "id": "8db17e23-29de-4dab-8886-af9717e0e742",
                      "name": "airtable2",
                      "type": "airtable"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Connections"],
        "summary": "Update Connection",
        "description": "Update a connection",
        "operationId": "updateConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "ID of the connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "requestBody": {
          "description": "Connection Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionRequest"
              },
              "examples": {
                "HubSpot Connection Request with Oauth": {
                  "description": "Sample HubSpot Connection parameters",
                  "value": {
                    "name": "exampleHubspotConnection",
                    "type": "hubspot",
                    "credential": {
                      "clientId": "15d6b8c5-48ea-4955-8ce5-d04bb9adad25",
                      "clientSecret": "64d70b56-ae19-4fee-9fa2-3e9113bcb202",
                      "refreshToken": "eu1-eae3-1af4-583d-91d4-f6414699feea"
                    }
                  }
                },
                "Stripe Connection Request": {
                  "description": "Sample Stripe Connection parameters",
                  "value": {
                    "name": "exampleStripeConnection21",
                    "type": "stripe",
                    "credential": {
                      "token": "<stripeToken>"
                    }
                  }
                },
                "AirTable Connection Request": {
                  "description": "Sample AirTable Connection parameters",
                  "value": {
                    "name": "exampleAirtableConnection",
                    "type": "airtable",
                    "credential": {
                      "personalAccessToken": "<yourAirtableApiKey>"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Connection"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Connections"],
        "summary": "Delete Connection",
        "description": "Delete a connection",
        "operationId": "deleteConnection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "ID of the connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/connections/{projectId}/{connectionId}/detail": {
      "get": {
        "tags": ["Connections"],
        "summary": "Get Connection Detail",
        "description": "Get connection detail by ID. Returns only non-sensitive information.",
        "operationId": "getConnectionView",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "ID of the connection",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "8db17e23-29de-4dab-8886-af9717e0e742"
          }
        ],
        "responses": {
          "200": {
            "description": "Connection Detail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Credential object for the connection.\n\n Its structure is dependent on the connection type and can be fetched by following url: /connections/config"
                },
                "examples": {
                  "Connection Detail": {
                    "description": "Sample Bullhorn Connection parameters",
                    "value": {
                      "type": "bullhorn",
                      "restApiTokenUrl": "http://a.b.c",
                      "swimlane": "123",
                      "corpToken": "123"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs": {
      "get": {
        "tags": ["Data -- Catalogs"],
        "summary": "List Catalogs",
        "operationId": "listCatalogs",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Catalog"
                  }
                },
                "examples": {
                  "List Catalogs": {
                    "description": "List Catalogs",
                    "value": [
                      {
                        "id": "1",
                        "name": "peaka",
                        "displayName": "Peaka",
                        "catalogType": "internal",
                        "connectionId": null
                      },
                      {
                        "id": "2",
                        "name": "peaka",
                        "displayName": "Peaka Query",
                        "catalogType": "query",
                        "connectionId": null
                      },
                      {
                        "id": "555414570395501064",
                        "name": "examplename34",
                        "displayName": "exampleName34",
                        "catalogType": "stripe",
                        "connectionId": "fe47b030-3718-4537-a6ba-eaa93c7204ee"
                      },
                      {
                        "id": "555611268656923356",
                        "name": "examplename35",
                        "displayName": "exampleName35",
                        "catalogType": "segment",
                        "connectionId": "fe47b030-3718-4537-a6ba-eaa93c7204ee"
                      },
                      {
                        "id": "625151643029078208",
                        "name": "exampleairtablecatalog2",
                        "displayName": "exampleAirtableCatalog2",
                        "catalogType": "airtable",
                        "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data -- Catalogs"],
        "summary": "Create Catalog",
        "operationId": "createCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "requestBody": {
          "description": "Catalog Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogRequest"
              },
              "examples": {
                "Create Airtable Catalog": {
                  "description": "Create Airtable Catalog",
                  "value": {
                    "name": "exampleAirtableCatalog",
                    "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                  }
                },
                "Create GoogleSheets Catalog": {
                  "description": "Create GoogleSheets Catalog",
                  "value": {
                    "name": "exampleGoogleSheetsCatalog",
                    "connectionId": "p3fb17l83-g9de-46mb-8823-yu9717e0ekl8",
                    "extraParameters": {
                      "sheets": [
                        {
                          "id": "1zBlTlAarZ94Z-xbo8T-GZEckV93VGSse7qq0_S0Kdzc",
                          "name": "Customers"
                        },
                        {
                          "id": "glkuldqwerqwAarZ94Z-xbo8T-GdfhsdgVGSse7qq0_S0Kdzc",
                          "name": "Sales"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Catalog created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                },
                "examples": {
                  "Create Airtable Catalog": {
                    "description": "Create Airtable Catalog",
                    "value": {
                      "id": "626654862255325504",
                      "name": "exampleairtablecatalog",
                      "displayName": "exampleAirtableCatalog",
                      "catalogType": "airtable",
                      "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                    }
                  },
                  "Create Stripe Catalog": {
                    "description": "Create Stripe Catalog",
                    "value": {
                      "id": "626654862255325504",
                      "name": "exampleStripeCatalog",
                      "displayName": "exampleStripeCatalog",
                      "catalogType": "stripe",
                      "connectionId": "8db17e23-29de-4dab-8886-af9717e0e742"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "Bad Request": {
                    "description": "Bad Request",
                    "value": {
                      "errorCode": 100,
                      "message": "There are already a catalog with same name!!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}": {
      "get": {
        "tags": ["Data -- Catalogs"],
        "summary": "Read Catalog",
        "operationId": "readCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                },
                "examples": {
                  "Read Catalog": {
                    "description": "Read Catalog",
                    "value": {
                      "id": "627249916703408649",
                      "name": "exampleairtablecatalog",
                      "displayName": "exampleAirtableCatalog",
                      "catalogType": "airtable",
                      "connectionId": "8db17e23-29de-4dab-8886-af9717e0e74311"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Catalogs"],
        "summary": "Delete Catalog",
        "operationId": "deleteCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          }
        ],
        "responses": {
          "200": {
            "description": "Catalog deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas": {
      "get": {
        "tags": ["Data -- Catalogs"],
        "summary": "List Schemas",
        "operationId": "listSchemas",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Schema"
                  }
                },
                "examples": {
                  "List Schemas": {
                    "description": "List Schemas",
                    "value": [
                      {
                        "catalogId": "544639856899260964",
                        "schemaName": "testSchema"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas/{schemaName}/tables": {
      "get": {
        "tags": ["Data -- Catalogs"],
        "summary": "List Tables",
        "operationId": "listTables_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Name of the schema",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "public"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  }
                },
                "examples": {
                  "List Tables": {
                    "description": "List Tables",
                    "value": [
                      {
                        "catalogId": "544639856899260964",
                        "catalogName": "airtable2",
                        "schemaName": "test",
                        "tableName": "projects",
                        "isCacheable": false,
                        "isDynamicTable": false,
                        "isCached": false
                      },
                      {
                        "catalogId": "544639856899260964",
                        "catalogName": "airtable2",
                        "schemaName": "test",
                        "tableName": "testTable",
                        "isCacheable": false,
                        "isDynamicTable": false,
                        "isCached": false
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas/{schemaName}/tables/{tableName}/columns": {
      "get": {
        "tags": ["Data -- Catalogs"],
        "summary": "List Columns",
        "operationId": "listColumns_1",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Name of the schema",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "public"
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "actor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                },
                "examples": {
                  "List Columns": {
                    "description": "List Columns",
                    "value": [
                      {
                        "name": "id",
                        "dataType": "bigint",
                        "displayName": "id",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "hs_object_id",
                        "dataType": "varchar",
                        "displayName": "hs_object_id",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "email",
                        "dataType": "varchar",
                        "displayName": "email",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "name",
                        "dataType": "varchar",
                        "displayName": "name",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "domain",
                        "dataType": "varchar",
                        "displayName": "domain",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "industry",
                        "dataType": "varchar",
                        "displayName": "industry",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "phone",
                        "dataType": "varchar",
                        "displayName": "phone",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "country",
                        "dataType": "varchar",
                        "displayName": "country",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "state",
                        "dataType": "varchar",
                        "displayName": "state",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "city",
                        "dataType": "varchar",
                        "displayName": "city",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "description",
                        "dataType": "varchar",
                        "displayName": "description",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "createdate",
                        "dataType": "timestamp(6)",
                        "displayName": "createdate",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "hs_lastmodifieddate",
                        "dataType": "timestamp(6)",
                        "displayName": "hs_lastmodifieddate",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "properties",
                        "dataType": "json",
                        "displayName": "properties",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "propertieswithhistory",
                        "dataType": "json",
                        "displayName": "propertieswithhistory",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "createdat",
                        "dataType": "timestamp(6)",
                        "displayName": "createdat",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "updatedat",
                        "dataType": "timestamp(6)",
                        "displayName": "updatedat",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "archived",
                        "dataType": "boolean",
                        "displayName": "archived",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "archivedat",
                        "dataType": "timestamp(6)",
                        "displayName": "archivedat",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "associations",
                        "dataType": "json",
                        "displayName": "associations",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_pagination_anchor",
                        "dataType": "varchar",
                        "displayName": "_q_pagination_anchor",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_limit",
                        "dataType": "bigint",
                        "displayName": "_q_limit",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_offset",
                        "dataType": "varchar",
                        "displayName": "_q_offset",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_properties",
                        "dataType": "json",
                        "displayName": "_q_properties",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_properties_with_history",
                        "dataType": "varchar",
                        "displayName": "_q_properties_with_history",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_associations",
                        "dataType": "varchar",
                        "displayName": "_q_associations",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      },
                      {
                        "name": "_q_archived",
                        "dataType": "boolean",
                        "displayName": "_q_archived",
                        "defaultValue": null,
                        "isNotNull": false,
                        "isUnique": false
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas/{schemaName}/tables/{tableName}/isCached": {
      "get": {
        "tags": ["Data -- Catalogs"],
        "summary": "Table is Cached",
        "operationId": "isCached",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Name of the schema",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "public"
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "actor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableCacheResult"
                },
                "examples": {
                  "Table is Cached": {
                    "description": "Table is Cached",
                    "value": {
                      "isCached": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/schemas/{schemaName}/tables/{tableName}/statistics": {
      "get": {
        "tags": ["Data -- Catalogs"],
        "summary": "Table Statistics",
        "operationId": "getTableStatistics",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Name of the schema",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "public"
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Name of the table",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "actor"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableStatistics"
                },
                "examples": {
                  "Table Statistics": {
                    "description": "Table Statistics",
                    "value": {
                      "catalogId": "846085284821991568",
                      "schemaName": "public",
                      "tableName": "actor",
                      "columnStatistics": [
                        {
                          "columnName": "actor_id",
                          "distinctFraction": -1
                        },
                        {
                          "columnName": "first_name",
                          "distinctFraction": -0.64
                        },
                        {
                          "columnName": "last_name",
                          "distinctFraction": -0.605
                        },
                        {
                          "columnName": "last_update",
                          "distinctFraction": 1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/bitable": {
      "get": {
        "tags": ["Data -- Internal Tables"],
        "summary": "List BI Tables",
        "description": "See Data -- Catalog / List Tables for more details.",
        "operationId": "listBiTables",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/bitable/{tableName}": {
      "post": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Create BI Table",
        "operationId": "createInternalBiTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                },
                "example": {
                  "catalogId": "1",
                  "catalogName": "peaka",
                  "schemaName": "bitable",
                  "tableName": "testtable",
                  "isCacheable": false,
                  "isDynamicTable": false,
                  "isCached": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Delete BI Table",
        "operationId": "deleteBiTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/bitable/{tableName}/columns": {
      "get": {
        "tags": ["Data -- Internal Tables"],
        "summary": "List BI Columns",
        "description": "See Data -- Catalog / List Columns for more details.",
        "operationId": "listBiColumns",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Add BI Column",
        "operationId": "addBiColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Column Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnRequest"
              },
              "examples": {
                "Add Column": {
                  "description": "Add Column",
                  "value": [
                    {
                      "dataType": "bigint",
                      "displayName": "num19",
                      "defaultValue": null,
                      "name": "num19"
                    },
                    {
                      "dataType": "bigint",
                      "displayName": "num18",
                      "defaultValue": 3,
                      "isUnique": true,
                      "name": "num18"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Column added successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnDetail"
                },
                "example": [
                  {
                    "name": "num19",
                    "dataType": "bigint",
                    "displayName": "num19",
                    "defaultValue": null,
                    "isNotNull": false,
                    "isUnique": false
                  },
                  {
                    "name": "num18",
                    "dataType": "bigint",
                    "displayName": "num18",
                    "defaultValue": "3",
                    "isNotNull": false,
                    "isUnique": true
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/bitable/{tableName}/columns/{columnName}": {
      "put": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Update BI Column",
        "operationId": "updateBiColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Delete BI Column",
        "operationId": "deleteBiColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Column deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/table": {
      "get": {
        "tags": ["Data -- Internal Tables"],
        "summary": "List Tables",
        "description": "See Data -- Catalog / List Tables for more details.",
        "operationId": "listTables",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/table/{tableName}": {
      "post": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Create Table",
        "operationId": "createInternalTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                },
                "example": {
                  "catalogId": "1",
                  "catalogName": "peaka",
                  "schemaName": "table",
                  "tableName": "testtable",
                  "isCacheable": false,
                  "isDynamicTable": false,
                  "isCached": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Delete Table",
        "operationId": "deleteTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/table/{tableName}/columns": {
      "get": {
        "tags": ["Data -- Internal Tables"],
        "summary": "List Columns",
        "description": "See Data -- Catalog / List Columns for more details.",
        "operationId": "listColumns",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Add Column",
        "operationId": "addColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Column Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnRequest"
              },
              "examples": {
                "Add Column": {
                  "description": "Add Column",
                  "value": [
                    {
                      "dataType": "bigint",
                      "displayName": "num19",
                      "defaultValue": null,
                      "name": "num19"
                    },
                    {
                      "dataType": "bigint",
                      "displayName": "num18",
                      "defaultValue": 3,
                      "isUnique": true,
                      "name": "num18"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Column added successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnDetail"
                },
                "example": [
                  {
                    "name": "num19",
                    "dataType": "bigint",
                    "displayName": "num19",
                    "defaultValue": null,
                    "isNotNull": false,
                    "isUnique": false
                  },
                  {
                    "name": "num18",
                    "dataType": "bigint",
                    "displayName": "num18",
                    "defaultValue": "3",
                    "isNotNull": false,
                    "isUnique": true
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/table/{tableName}/columns/{columnName}": {
      "put": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Update Column",
        "operationId": "updateColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnDetail"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Delete Column",
        "operationId": "deleteColumn",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Column deleted successfully"
          }
        }
      }
    },
    "/data/projects/{projectId}/table/{tableName}/import": {
      "post": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Import CSV",
        "description": "Imports data from a CSV file into a specified internal table in a given project.\n\nThis endpoint accepts a `multipart/form-data` request with two parts:\n\n- **file**: The CSV file to be imported.\n- **request**: A JSON string describing how the CSV columns map to the table's columns.\n\nCSV file format can be get from `/projects/{projectId}/table/{tableName}/sample`.\n\n\n#### Request JSON syntax\nThe `request` part must contain:\n- `mappings`: A list of objects, each with:\n  - `name`: The name of the target column in the internal table.\n  - Either `csvColumnName` or `csvColumnIndex` to define the corresponding column in the CSV.\n- `containsHeader`: A boolean indicating whether the CSV includes a header row.\n\n#### Examples\nWith column names:\n```\n{\n  \"mappings\": [\n    { \"name\": \"numcol\", \"csvColumnName\": \"numcol\" },\n    { \"name\": \"text\", \"csvColumnName\": \"text\" },\n    { \"name\": \"decimalcol\", \"csvColumnName\": \"decimalcol\" }\n  ],\n  \"containsHeader\": true\n}\n```\n\nWith column indexes:\n```\n{\n  \"mappings\": [\n    { \"name\": \"numcol\", \"csvColumnIndex\": 0 },\n    { \"name\": \"text\", \"csvColumnIndex\": 1 },\n    { \"name\": \"decimalcol\", \"csvColumnIndex\": 2 }\n  ],\n  \"containsHeader\": false\n}\n```\n\n- When the CSV contains a header row (`containsHeader: true`), you can use either `csvColumnName` or `csvColumnIndex`.\n- When the CSV does **not** contain a header row (`containsHeader: false`), you **must** use `csvColumnIndex`.\n\n#### Response\nThe endpoint currently runs synchronously and returns an `ImportJob` object with the job status and number of processed rows.\n\nIn future versions, this endpoint will return only the `jobId`, and the progress/result will be tracked via a separate job status endpoint:\n`GET /jobs/{id}`\n",
        "operationId": "importCsv",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": ["file", "request"],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "CSV file",
                    "format": "binary"
                  },
                  "request": {
                    "type": "string",
                    "description": "JSON string with import config",
                    "format": "json"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import job created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ImportJob"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/table/{tableName}/sample": {
      "get": {
        "tags": ["Data -- Internal Tables"],
        "summary": "Get Sample CSV",
        "description": "Returns a downloadable sample CSV file for the specified internal table in a project.\n\nThis CSV sample contains a few rows of mock or representative data from the table's schema.\nIt helps users understand the structure of the table and prepare matching CSV files for import.\n\n#### Response\n- Content-Type: `text/csv`\n- Disposition: Attachment (`sample.csv`)\n- The first row contains column headers.\n- The following rows contain example values for each column.\n\n#### Example Output\n```\ntext,num19,numcol,decimalcol\n\"sample text\",1176,1044,77.3711303273\n\"sample text\",9354,7923,96.6658831270\n\"sample text\",7658,8750,30.3928941706\n```\n\nThis sample can be used as a template when preparing files to upload using the `/import` endpoint.\n",
        "operationId": "csvSample",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sample CSV returned successfully",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/queries": {
      "get": {
        "tags": ["Data -- Queries"],
        "summary": "List Queries",
        "operationId": "listQueries",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Query created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Query"
                  }
                },
                "example": [
                  {
                    "id": "709891320440684892",
                    "displayName": "sample2",
                    "name": "sample2",
                    "inputQuery": ""
                  },
                  {
                    "id": "702142445051183684",
                    "displayName": "deneme",
                    "name": "deneme",
                    "inputQuery": "SELECT count(*) from \"examplestripecatalogname\".\"payment\".\"customers\""
                  },
                  {
                    "id": "709891051854233848",
                    "displayName": "sample",
                    "name": "sample",
                    "inputQuery": ""
                  },
                  {
                    "id": "709922802836177297",
                    "displayName": "sampleQuery",
                    "name": "samplequery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.charges"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data -- Queries"],
        "summary": "Create Query",
        "operationId": "createQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Query Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              },
              "examples": {
                "Create Query": {
                  "description": "Create Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.customers"
                  }
                },
                "Create Materialized Query": {
                  "description": "Create Materialized Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.customers",
                    "queryType": "MATERIALIZED"
                  }
                },
                "Create Materialized Scheduled Query": {
                  "description": "Create Materialized Scheduled Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.customers",
                    "queryType": "MATERIALIZED",
                    "schedule": {
                      "expression": "PT6H"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Query created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Query"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/queries/execute": {
      "post": {
        "tags": ["Data -- Queries"],
        "summary": "Execute Query",
        "operationId": "executeQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Execute Query Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryExecuteRequest"
              },
              "examples": {
                "Execute Query": {
                  "description": "Execute Query",
                  "value": {
                    "from": [
                      {
                        "catalogName": "peaka",
                        "schemaName": "query",
                        "tableName": "samplequery"
                      }
                    ]
                  }
                },
                "Execute Query with Limit": {
                  "description": "Execute Query with Limit",
                  "value": {
                    "columns": ["amount"],
                    "from": [
                      {
                        "catalogName": "peaka",
                        "schemaName": "query",
                        "tableName": "samplequery"
                      }
                    ],
                    "filters": null,
                    "limit": 3,
                    "offset": 0,
                    "orderBy": null,
                    "rows": null
                  }
                },
                "Execute Direct Stripe with Filter and Order By": {
                  "description": "Execute Direct Stripe with Filter and Order By",
                  "value": {
                    "columns": ["amount"],
                    "from": [
                      {
                        "catalogName": "wilderman_green",
                        "schemaName": "payment",
                        "tableName": "charges"
                      }
                    ],
                    "filters": {
                      "and": [
                        [
                          {
                            "column": {
                              "catalogName": "wilderman_green",
                              "schemaName": "payment",
                              "tableName": "charges",
                              "columnName": "amount"
                            }
                          },
                          ">",
                          [150]
                        ]
                      ]
                    },
                    "limit": 50,
                    "offset": 0,
                    "orderBy": ["amount DESC"],
                    "rows": null
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Query Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                },
                "example": {
                  "columns": [
                    {
                      "catalogId": "2",
                      "catalogName": "peaka",
                      "schemaName": "query",
                      "tableName": "samplequery",
                      "columnName": "amount"
                    }
                  ],
                  "data": [
                    [
                      {
                        "name": "amount",
                        "displayName": "amount",
                        "dataType": "bigint",
                        "value": "75",
                        "order": 0
                      }
                    ],
                    [
                      {
                        "name": "amount",
                        "displayName": "amount",
                        "dataType": "bigint",
                        "value": "75",
                        "order": 0
                      }
                    ],
                    [
                      {
                        "name": "amount",
                        "displayName": "amount",
                        "dataType": "bigint",
                        "value": "75",
                        "order": 0
                      }
                    ]
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/queries/folders": {
      "get": {
        "tags": ["Data -- Queries"],
        "summary": "List Query Folders",
        "operationId": "listQueryFolders",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder Listed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QueryFolderItem"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data -- Queries"],
        "summary": "Create Query Folder at Root",
        "operationId": "createQueryFolderAtRoot",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryFolderCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Folder Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryFolderItem"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/queries/folders/{folderId}": {
      "get": {
        "tags": ["Data -- Queries"],
        "summary": "Read Query Folder",
        "operationId": "readQueryFolder",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder Read",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryFolderItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data -- Queries"],
        "summary": "Add/Remove Query In/From Folder",
        "operationId": "addOrRemoveQueryFromFolder",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryFolderUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Folder Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryFolderItem"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data -- Queries"],
        "summary": "Create Query Folder With Folder Id",
        "operationId": "createQueryFolderWithFolderId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryFolderCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Folder Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryFolderItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Queries"],
        "summary": "Delete Query Folder With Folder Id",
        "operationId": "deleteQueryFolderWithFolderId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryFolderItem"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/queries/{queryId}": {
      "get": {
        "tags": ["Data -- Queries"],
        "summary": "Read Query",
        "operationId": "readQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read Query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Query"
                },
                "example": {
                  "id": "709922802836177297",
                  "displayName": "sampleQuery",
                  "name": "samplequery",
                  "inputQuery": "SELECT * from \"mycatalog\".payment.charges"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Data -- Queries"],
        "summary": "Update Query",
        "operationId": "updateQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Query Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              },
              "examples": {
                "Update Query": {
                  "description": "Update Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.charges"
                  }
                },
                "Update Materialized Query": {
                  "description": "Update Materialized Query",
                  "value": {
                    "displayName": "sampleQuery",
                    "inputQuery": "SELECT * from \"mycatalog\".payment.charges",
                    "queryType": "MATERIALIZED",
                    "schedule": {
                      "expression": "PT6H"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Query created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Query"
                },
                "example": {
                  "id": "709922802836177297",
                  "displayName": "sampleQuery",
                  "name": "samplequery",
                  "inputQuery": "SELECT * from \"mycatalog\".payment.charges"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Queries"],
        "summary": "Delete Query",
        "operationId": "deleteQuery",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/data/projects/{projectId}/semantic-catalogs": {
      "post": {
        "tags": ["Data -- Semantic Catalogs"],
        "summary": "Create a semantic catalog",
        "operationId": "createSemanticCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Semantic Catalog Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticCatalogRequest"
              },
              "example": {
                "name": "myCatalog"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Catalog created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Catalog"
                },
                "example": {
                  "id": "688890918747898103",
                  "name": "myCatalog",
                  "displayName": "myCatalog",
                  "type": "SEMANTIC"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/semantic-catalogs/{catalogId}": {
      "post": {
        "tags": ["Data -- Semantic Catalogs"],
        "summary": "Create a semantic table",
        "operationId": "createSemanticTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Semantic Table Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticTableRequest"
              },
              "example": {
                "schemaName": "mySchema",
                "tableName": "myTableName",
                "queryId": "788890918747898752"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Table created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemanticTable"
                },
                "example": {
                  "tableId": "688890918747898103",
                  "catalogName": "myCatalog",
                  "schemaName": "mySchema",
                  "tableName": "myTableName"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/semantic-catalogs/{catalogId}/share": {
      "post": {
        "tags": ["Data -- Semantic Catalogs"],
        "summary": "Share a semantic table",
        "operationId": "shareSemanticTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Share Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogShareRequest"
              },
              "example": {
                "target": "MQtMNNBY"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Table shared"
          }
        }
      }
    },
    "/data/projects/{projectId}/semantic-catalogs/{catalogId}/table/{tableId}": {
      "delete": {
        "tags": ["Data -- Semantic Catalogs"],
        "summary": "Delete a semantic table",
        "operationId": "deleteSemanticTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table deleted"
          }
        }
      }
    },
    "/data/projects/{projectId}/cache": {
      "post": {
        "tags": ["Data -- Cache"],
        "summary": "Create Cache",
        "operationId": "createCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "requestBody": {
          "description": "Create Cache Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheRequest"
              },
              "examples": {
                "Create Cache - One Time": {
                  "description": "Create Cache - One Time",
                  "value": {
                    "id": "960bd651-7b3c-4511-9a88-18e14ac7742a",
                    "catalogId": "627249916703408649",
                    "schemaName": "payment",
                    "tableName": "customers"
                  }
                },
                "Create Cache - Incremental Update Scheduled": {
                  "description": "Create Cache - Incrementally updated every 6 hrs.",
                  "value": {
                    "id": "960bd651-7b3c-4511-9a88-18e14ac7742a",
                    "catalogId": "627249916703408649",
                    "schemaName": "payment",
                    "tableName": "customers",
                    "incrementalCacheSchedule": {
                      "type": "BASIC",
                      "expression": "PT6H"
                    }
                  }
                },
                "Create Cache - Incremental and Fully Refresh Update Scheduled": {
                  "description": "Create Cache - Incrementally updated every 6 hrs  and Fully refreshed every day.",
                  "value": {
                    "id": "960bd651-7b3c-4511-9a88-18e14ac7742a",
                    "catalogId": "627249916703408649",
                    "schemaName": "payment",
                    "tableName": "customers",
                    "fullRefreshCacheSchedule": {
                      "type": "BASIC",
                      "expression": "PT24H"
                    },
                    "incrementalCacheSchedule": {
                      "type": "BASIC",
                      "expression": "PT6H"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cache"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/batch": {
      "post": {
        "tags": ["Data -- Cache"],
        "summary": "Create Batch Cache",
        "operationId": "createBatchCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Create Cache Request",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CacheRequest"
                }
              },
              "examples": {
                "Create Multiple Caches": {
                  "description": "Create Multiple Caches",
                  "value": [
                    {
                      "catalogId": "627249916703408649",
                      "schemaName": "payment",
                      "tableName": "customers"
                    },
                    {
                      "catalogId": "627249916703408649",
                      "schemaName": "payment",
                      "tableName": "charges",
                      "incrementalCacheSchedule": {
                        "type": "BASIC",
                        "expression": "PT6H"
                      }
                    },
                    {
                      "catalogId": "627249916703408649",
                      "schemaName": "payment",
                      "tableName": "invoices",
                      "fullRefreshCacheSchedule": {
                        "type": "BASIC",
                        "expression": "PT24H"
                      },
                      "incrementalCacheSchedule": {
                        "type": "BASIC",
                        "expression": "PT6H"
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CacheCreateStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/status": {
      "get": {
        "tags": ["Data -- Cache"],
        "summary": "Get All Cache Statuses of a Project",
        "operationId": "getCacheStatusByProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CacheStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/{cacheId}": {
      "put": {
        "tags": ["Data -- Cache"],
        "summary": "Update Cache Settings",
        "operationId": "updateCacheSettings",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "cacheId",
            "in": "path",
            "description": "Cache ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "960bd651-7b3c-4511-9a88-18e14ac7742a"
          }
        ],
        "requestBody": {
          "description": "Update Cache Settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheSettingsUpdateRequest"
              },
              "examples": {
                "Update Cache Schedules": {
                  "description": "Update Cache Schedules",
                  "value": "{\n    \"fullRefreshCacheSchedule\": {\n        \"type\": \"BASIC\",\n        \"expression\": \"PT24H\"\n    },\n    {\n     \"incrementalCacheSchedule\": {\n        \"type\": \"BASIC\",\n        \"expression\": \"PT6H\"\n    }\n}"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Cache"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Cache"],
        "summary": "Delete Cache",
        "operationId": "deleteCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cacheId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/{cacheId}/fullRefreshUpdate": {
      "post": {
        "tags": ["Data -- Cache"],
        "summary": "Full Refresh Cache",
        "operationId": "fullRefreshCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cacheId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/{cacheId}/incrementalUpdate": {
      "post": {
        "tags": ["Data -- Cache"],
        "summary": "Update Cache Incrementally",
        "operationId": "incrementalUpdateCache",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cacheId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/cache/{cacheId}/status": {
      "get": {
        "tags": ["Data -- Cache"],
        "summary": "Get Cache Status",
        "operationId": "getCacheStatus",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "cacheId",
            "in": "path",
            "description": "Cache ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "960bd651-7b3c-4511-9a88-18e14ac7742a"
          },
          {
            "name": "excludeLogs",
            "in": "query",
            "description": "Exclude Logs",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CacheStatus"
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalog/{catalogId}/cache/status": {
      "get": {
        "tags": ["Data -- Cache"],
        "summary": "Get All Cache Statuses of a Catalog",
        "operationId": "getCacheStatusByCatalog",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "Catalog ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 627249916703408600
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CacheStatus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/data/projects/{projectId}/catalogs/{catalogId}/parametricTables": {
      "get": {
        "tags": ["Data -- Parametric Tables"],
        "summary": "List Parametric Tables",
        "operationId": "listParametricTables",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          }
        ],
        "responses": {
          "200": {
            "description": "List of parametric tables",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParametricTable"
                  }
                },
                "examples": {
                  "Example List": {
                    "description": "Example List",
                    "value": [
                      {
                        "fromSchema": "public",
                        "fromTable": "products",
                        "toSchema": "analytics",
                        "toTable": "param_products",
                        "paramValues": [
                          {
                            "key": "country",
                            "value": "US"
                          },
                          {
                            "key": "year",
                            "value": 2024
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data -- Parametric Tables"],
        "summary": "Create Parametric Table",
        "operationId": "createParametricTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParametricTable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Parametric table created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParametricTable"
                },
                "examples": {
                  "Created Table": {
                    "description": "Created Table",
                    "value": {
                      "fromSchema": "public",
                      "fromTable": "products",
                      "toSchema": "analytics",
                      "toTable": "param_products",
                      "paramValues": [
                        {
                          "key": "country",
                          "value": "US"
                        },
                        {
                          "key": "year",
                          "value": 2024
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Target table already exists",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ParametricTable"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Parametric Tables"],
        "summary": "Delete Parametric Table",
        "operationId": "deleteParametricTable",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "mtKDhe1U"
          },
          {
            "name": "catalogId",
            "in": "path",
            "description": "ID of the catalog",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 846085284821991600
          },
          {
            "name": "toSchema",
            "in": "query",
            "description": "Target schema of the parametric table",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "analytics"
          },
          {
            "name": "toTable",
            "in": "query",
            "description": "Target table name of the parametric table",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "param_products"
          }
        ],
        "responses": {
          "204": {
            "description": "Parametric table deleted successfully"
          },
          "404": {
            "description": "Parametric table not found"
          }
        }
      }
    },
    "/ui/initSession": {
      "get": {
        "tags": ["Embedded Peaka Api"],
        "summary": "Init Session (Deprecated)",
        "description": "Init session for the user (Deprecated)",
        "operationId": "initSession_1",
        "parameters": [
          {
            "name": "timeoutInSeconds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "theme",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "themeOverride",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedSession"
                },
                "examples": {
                  "Session created successfully": {
                    "description": "Session created successfully",
                    "value": {
                      "sessionUrl": "https://partner.peaka.studio/api/v1/ui/session?code=2eccdbf31efa110943b470b9023e9a52587c166e4d1c21f23fabbcd7de5b74ab"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Embedded Peaka Api"],
        "summary": "Init Session",
        "description": "Init session for the user",
        "operationId": "initSession",
        "requestBody": {
          "description": "Session Initialization Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitSessionRequest"
              },
              "examples": {
                "Session Initialization Request": {
                  "description": "Session Initialization Request",
                  "value": {
                    "timeoutInSeconds": 300,
                    "projectId": "projectId",
                    "theme": "dark",
                    "themeOverride": true,
                    "featureFlags": {
                      "feature1": true,
                      "feature2": false
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Session created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EmbeddedSession"
                },
                "examples": {
                  "Session created successfully": {
                    "description": "Session created successfully",
                    "value": {
                      "sessionUrl": "https://partner.peaka.studio/api/v1/ui/session?code=2eccdbf31efa110943b470b9023e9a52587c166e4d1c21f23fabbcd7de5b74ab"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/supportedDrivers": {
      "get": {
        "tags": ["Supported Drivers"],
        "summary": "List Supported Drivers",
        "operationId": "getSupportedDrivers",
        "parameters": [
          {
            "name": "catalogName",
            "in": "query",
            "description": "Catalog name. \n\nDrivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "sampleHubSpotCatalog"
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported drivers",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "List of all drivers.": {
                    "description": "List of all drivers.",
                    "value": {
                      "JDBC": "jdbc:peaka://dbc.peaka.studio:4567/?extraCredentials=peakaKey:gk4aUnCO.IYxkP1NxP67YkVViqYGZd4INpUAr04TE",
                      "SQL_ALCHEMY": "peaka://dbc.peaka.studio:4567/{catalogName}?http_scheme=https&extra_credential=[[\"peakaKey\",\"gk4aUnCO.IYxkP1NxP67YkVViqYGZd4INpUAr04TE\"]]&access_token=true"
                    }
                  },
                  "List of all drivers with CatalogName": {
                    "description": "Drivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use.",
                    "value": {
                      "JDBC": "jdbc:peaka://dbc.peaka.studio:4567/?extraCredentials=peakaKey:gk4aUnCO.IYxkP1NxP67YkVViqYGZe3INpUAr04TE",
                      "SQL_ALCHEMY": "peaka://dbc.peaka.studio:4567/sampleCatalog?http_scheme=https&extra_credential=[[\"peakaKey\",\"gk4aUnCO.IYxkP1NxP67YkVViqYGZe3INpUAr04TE\"]]&access_token=true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/supportedDrivers/jdbc": {
      "get": {
        "tags": ["Supported Drivers"],
        "summary": "Get JDBC Driver",
        "operationId": "getJdbcDriver",
        "responses": {
          "200": {
            "description": "Url for given driver",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "JDBC driver": {
                    "description": "JDBC driver",
                    "value": "{\n    \"JDBC\": \"jdbc:peaka://dbc.peaka.studio:4567/?extraCredentials=peakaKey:gk4aUnCO.IYxkP1NxP67YkVViqYGZe3INpUAr04TE\",\n}\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/supportedDrivers/sql_alchemy": {
      "get": {
        "tags": ["Supported Drivers"],
        "summary": "Get SQL Alchemy Driver",
        "operationId": "getSqlAlchemyDriver",
        "parameters": [
          {
            "name": "catalogName",
            "in": "query",
            "description": "Catalog name. \n\nDrivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use. ",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "sampleHubSpotCatalog"
          }
        ],
        "responses": {
          "200": {
            "description": "Url for given driver",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "SQL_ALCHEMY driver with Catalog provided": {
                    "description": "Drivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use.",
                    "value": {
                      "SQL_ALCHEMY": "peaka://dbc.peaka.studio:4567/sampleCatalog?http_scheme=https&extra_credential=[[\"peakaKey\",\"gk4aUnCO.IYxkP1NxP67YkVViqYGZe3INpUAr04TE\"]]&access_token=true"
                    }
                  },
                  "SQL_ALCHEMY driver without Catalog not provided": {
                    "description": "Drivers such as sql_alchemy supports only one catalog at a time. So specific catalog name must be provided in order to use. The user should replace {catalogName} with the catalog desired.",
                    "value": {
                      "SQL_ALCHEMY": "peaka://dbc.peaka.studio:4567/{catalogName}?http_scheme=https&extra_credential=[[\"peakaKey\",\"gk4aUnCO.IYxkP1NxP67YkVViqYGZd4INpUAr04TE\"]]&access_token=true"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}": {
      "get": {
        "tags": ["Data -- Metadata"],
        "summary": "Get Project Metadata",
        "operationId": "getProjectMetadata",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/categorical/{catalogId}/{schemaName}/{tableName}/{columnName}": {
      "put": {
        "tags": ["Data -- Metadata"],
        "summary": "Generate categorical values from the column.",
        "operationId": "generateCategoricalColumnValues",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCategoricalColumnRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Metadata"],
        "summary": "Delete categorical values from the column meta and remove the scheduled job",
        "operationId": "deleteCategoricalColumnValues",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/golden-sql/query": {
      "get": {
        "tags": ["Data -- Metadata"],
        "summary": "Semantic query golden sqls for the project.",
        "operationId": "queryGoldenSqls",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/golden-sqls": {
      "get": {
        "tags": ["Data -- Metadata"],
        "summary": "List of golden sqls for the project.",
        "operationId": "listGoldenSqls",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Data -- Metadata"],
        "summary": "Create golden sql for the project",
        "operationId": "addGoldenSql",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataAddGoldenSqlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/golden-sqls/{id}": {
      "delete": {
        "tags": ["Data -- Metadata"],
        "summary": "Delete golden sql from the project.",
        "operationId": "deleteGoldenSql",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/query": {
      "get": {
        "tags": ["Data -- Metadata"],
        "summary": "Semantic query metadata for the project.",
        "operationId": "queryMetadata",
        "parameters": [
          {
            "name": "table",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/questions/generate": {
      "get": {
        "tags": ["Data -- Metadata"],
        "summary": "Generate sample ai questions for the project",
        "operationId": "generateSampleQuestions",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "question",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/refresh": {
      "post": {
        "tags": ["Data -- Metadata"],
        "summary": "Refresh Project Metadata",
        "operationId": "refreshMetadata",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataRefreshMetadataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/refresh/{catalogId}": {
      "get": {
        "tags": ["Data -- Metadata"],
        "summary": "Get Metadata Refresh Job Status",
        "operationId": "getRefreshMetadataJobStatus",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Metadata Refresh Job Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataRefreshJobStatusResult"
                },
                "examples": {
                  "Get Metadata Refresh Job Response Example": {
                    "description": "Get Metadata Refresh Job Response Example",
                    "value": "        {\n            \"status\": \"active\" // Possible values: active, not-active,completed, waiting, delayed, failed, paused, stuck\n        }\n"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/relations/{catalogId}": {
      "get": {
        "tags": ["Data -- Metadata"],
        "summary": "Get Project Catalog Metadata Relations",
        "operationId": "getProjectCatalogMetadataRelations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/relations/{catalogId}/{schemaName}/{tableName}/{columnName}": {
      "post": {
        "tags": ["Data -- Metadata"],
        "summary": "Add Relation To Metadata",
        "operationId": "addRelation",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataAddRelationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/relations/{catalogId}/{schemaName}/{tableName}/{relationId}": {
      "put": {
        "tags": ["Data -- Metadata"],
        "summary": "Update Relation From Metadata",
        "operationId": "updateRelation",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataUpdateRelationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Data -- Metadata"],
        "summary": "Delete Relation From Metadata",
        "operationId": "deleteRelation",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/semantics/{catalogId}/{schemaName}/{tableName}": {
      "post": {
        "tags": ["Data -- Metadata"],
        "summary": "Generate semantics for the table",
        "operationId": "generateSemantics",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCreateSemanticsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/{catalogId}": {
      "put": {
        "tags": ["Data -- Metadata"],
        "summary": "Update Metadata ai usage per catalog level",
        "operationId": "updateMetadataWithCatalogId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataAIUsageUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/{catalogId}/{schemaName}": {
      "put": {
        "tags": ["Data -- Metadata"],
        "summary": "Update Metadata ai usage per schema level",
        "operationId": "updateMetadataWithCatalogIdAndSchemaName",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataAIUsageUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metadata/{projectId}/{catalogId}/{schemaName}/{tableName}": {
      "put": {
        "tags": ["Data -- Metadata"],
        "summary": "Update Metadata",
        "operationId": "updateMetadata",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai/{projectId}/agent": {
      "post": {
        "tags": ["AI -- Agent"],
        "summary": "Ask Question To AI Agent",
        "operationId": "ask",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Question to ask",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAgentTaskRequest"
              },
              "examples": {
                "Ask Question To AI Agent": {
                  "description": "Ask Question To AI Agent",
                  "value": {
                    "message": "What are the top 3 portfolios ranked by their total market value as of the most recent date recorded?"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ask Question To AI Agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIAgentTaskResponse"
                },
                "examples": {
                  "Ask Question To AI Example": {
                    "description": "Ask Question To AI Example",
                    "value": {
                      "output": {
                        "query": "WITH LatestDate AS ( SELECT MAX(\"date\") AS \"latest_date\" FROM \"supabase\".\"public\".\"holdings\" ) SELECT h.\"portfolio_name\", SUM(h.\"ending_market_value\") AS \"total_market_value\" FROM \"supabase\".\"public\".\"holdings\" h JOIN LatestDate ld ON h.\"date\" = ld.\"latest_date\" GROUP BY h.\"portfolio_name\" ORDER BY \"total_market_value\" DESC LIMIT 5",
                        "data": [
                          [
                            {
                              "dataType": "varchar",
                              "name": "portfolio_name",
                              "order": 0,
                              "value": "102296_9"
                            },
                            {
                              "dataType": "real",
                              "name": "total_market_value",
                              "order": 1,
                              "value": 1887237400
                            }
                          ],
                          [
                            {
                              "dataType": "varchar",
                              "name": "portfolio_name",
                              "order": 0,
                              "value": "103100_7"
                            },
                            {
                              "dataType": "real",
                              "name": "total_market_value",
                              "order": 1,
                              "value": 6269447.5
                            }
                          ],
                          [
                            {
                              "dataType": "varchar",
                              "name": "portfolio_name",
                              "order": 0,
                              "value": "103271_3"
                            },
                            {
                              "dataType": "real",
                              "name": "total_market_value",
                              "order": 1,
                              "value": 2563462.8
                            }
                          ]
                        ],
                        "text": "The top 3 portfolios ranked by their total market value as of the most recent date recorded are: Portfolio '102296_9' with a total market value of 1,887,237,400, Portfolio '103100_7' with a total market value of 6,269,447.5, and Portfolio '103271_3' with a total market value of 2,563,462.8."
                      },
                      "threadId": "2183372c-7b72-479a-9eec-dd29aafa255b"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai/{projectId}/agent/history": {
      "get": {
        "tags": ["AI -- Agent"],
        "summary": "Get AI Chat History",
        "operationId": "getChatHistory",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get AI Chat History",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIChatHistoryResponse"
                },
                "examples": {
                  "Get AI Chat History": {
                    "description": "Get AI Chat History",
                    "value": {
                      "history": [
                        {
                          "id": "def9ccc7-a791-42f9-b40f-47679cde3b12",
                          "aiThreadId": "2183372c-7b72-479a-9eec-dd29aafa255b",
                          "displayName": "What are the top 3 portfolios ranked by their total market value as of the most recent date recorded?",
                          "tasks": [
                            {
                              "step": [
                                {
                                  "action": {
                                    "log": "The first example is very similar to the current question. I will use the SQL query from that example and modify it to fit the current question, ensuring it retrieves the top 3 portfolios ranked by their total market value as of the most recent date recorded.\n\nAction: table-name-semantic-search-tool\nAction Input: portfolios, market value, date",
                                    "tool": "table-name-semantic-search-tool",
                                    "toolInput": "portfolios, market value, date"
                                  },
                                  "observation": "supabase.public.portfolios,supabase.public.holdings,supabase.public.currencies,supabase.public.assets,supabase.public.assetclasses,supabase.public.assettypes,supabase.public.exchanges,supabase.public.transactiontypes,supabase.public.transactions,supabase.realtime.schema_migrations"
                                }
                              ],
                              "output": {
                                "data": [
                                  [
                                    {
                                      "name": "portfolio_name",
                                      "order": 0,
                                      "value": "102296_9",
                                      "dataType": "varchar"
                                    },
                                    {
                                      "name": "total_market_value",
                                      "order": 1,
                                      "value": 1887237400,
                                      "dataType": "real"
                                    }
                                  ]
                                ],
                                "text": "The top 3 portfolios ranked by their total market value as of the most recent date recorded are: Portfolio '102296_9' with a total market value of 1,887,237,400, Portfolio '103100_7' with a total market value of 6,269,447.5, and Portfolio '103271_3' with a total market value of 2,563,462.8.",
                                "query": "WITH LatestDate AS ( SELECT MAX(\"date\") AS \"latest_date\" FROM \"supabase\".\"public\".\"holdings\" ) SELECT h.\"portfolio_name\", SUM(h.\"ending_market_value\") AS \"total_market_value\" FROM \"supabase\".\"public\".\"holdings\" h JOIN LatestDate ld ON h.\"date\" = ld.\"latest_date\" GROUP BY h.\"portfolio_name\" ORDER BY \"total_market_value\" DESC LIMIT 5"
                              },
                              "message": "What are the top 3 portfolios ranked by their total market value as of the most recent date recorded?",
                              "modelParams": {
                                "modelName": "gpt-4o",
                                "temperature": 0
                              }
                            }
                          ],
                          "source": "API_KEY"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai/{projectId}/agent/history/{threadId}": {
      "put": {
        "tags": ["AI -- Agent"],
        "summary": "Update AI Chat History Thread Name",
        "operationId": "updateChatHistoryDisplayNameByThreadId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New AI Chat Thread Name",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIChatHistoryUpdateRequest"
              },
              "examples": {
                "Update AI Chat History Thread Name": {
                  "description": "Update AI Chat History Thread Name",
                  "value": {
                    "name": "Top Portfolios"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update AI Chat History Thread Name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIChatHistoryResponse"
                },
                "examples": {
                  "Update AI Chat History Thread Name": {
                    "description": "Update AI Chat History Thread Name",
                    "value": {
                      "history": [
                        {
                          "id": "def9ccc7-a791-42f9-b40f-47679cde3b12",
                          "aiThreadId": "2183372c-7b72-479a-9eec-dd29aafa255b",
                          "displayName": "What are the top 3 portfolios ranked by their total market value as of the most recent date recorded?",
                          "tasks": [
                            {
                              "step": [
                                {
                                  "action": {
                                    "log": "The first example is very similar to the current question. I will use the SQL query from that example and modify it to fit the current question, ensuring it retrieves the top 3 portfolios ranked by their total market value as of the most recent date recorded.\n\nAction: table-name-semantic-search-tool\nAction Input: portfolios, market value, date",
                                    "tool": "table-name-semantic-search-tool",
                                    "toolInput": "portfolios, market value, date"
                                  },
                                  "observation": "supabase.public.portfolios,supabase.public.holdings,supabase.public.currencies,supabase.public.assets,supabase.public.assetclasses,supabase.public.assettypes,supabase.public.exchanges,supabase.public.transactiontypes,supabase.public.transactions,supabase.realtime.schema_migrations"
                                }
                              ],
                              "output": {
                                "data": [
                                  [
                                    {
                                      "name": "portfolio_name",
                                      "order": 0,
                                      "value": "102296_9",
                                      "dataType": "varchar"
                                    },
                                    {
                                      "name": "total_market_value",
                                      "order": 1,
                                      "value": 1887237400,
                                      "dataType": "real"
                                    }
                                  ]
                                ],
                                "text": "The top 3 portfolios ranked by their total market value as of the most recent date recorded are: Portfolio '102296_9' with a total market value of 1,887,237,400, Portfolio '103100_7' with a total market value of 6,269,447.5, and Portfolio '103271_3' with a total market value of 2,563,462.8.",
                                "query": "WITH LatestDate AS ( SELECT MAX(\"date\") AS \"latest_date\" FROM \"supabase\".\"public\".\"holdings\" ) SELECT h.\"portfolio_name\", SUM(h.\"ending_market_value\") AS \"total_market_value\" FROM \"supabase\".\"public\".\"holdings\" h JOIN LatestDate ld ON h.\"date\" = ld.\"latest_date\" GROUP BY h.\"portfolio_name\" ORDER BY \"total_market_value\" DESC LIMIT 5"
                              },
                              "message": "What are the top 3 portfolios ranked by their total market value as of the most recent date recorded?",
                              "modelParams": {
                                "modelName": "gpt-4o",
                                "temperature": 0
                              }
                            }
                          ],
                          "source": "API_KEY"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["AI -- Agent"],
        "summary": "Delete AI Chat History",
        "operationId": "deleteChatHistoryByThreadId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete AI Chat History",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIChatHistoryResponse"
                },
                "examples": {
                  "Delete AI Chat History": {
                    "description": "Delete AI Chat History",
                    "value": {
                      "history": [
                        {
                          "id": "def9ccc7-a791-42f9-b40f-47679cde3b12",
                          "aiThreadId": "2183372c-7b72-479a-9eec-dd29aafa255b",
                          "displayName": "What are the top 3 portfolios ranked by their total market value as of the most recent date recorded?",
                          "tasks": [
                            {
                              "step": [
                                {
                                  "action": {
                                    "log": "The first example is very similar to the current question. I will use the SQL query from that example and modify it to fit the current question, ensuring it retrieves the top 3 portfolios ranked by their total market value as of the most recent date recorded.\n\nAction: table-name-semantic-search-tool\nAction Input: portfolios, market value, date",
                                    "tool": "table-name-semantic-search-tool",
                                    "toolInput": "portfolios, market value, date"
                                  },
                                  "observation": "supabase.public.portfolios,supabase.public.holdings,supabase.public.currencies,supabase.public.assets,supabase.public.assetclasses,supabase.public.assettypes,supabase.public.exchanges,supabase.public.transactiontypes,supabase.public.transactions,supabase.realtime.schema_migrations"
                                }
                              ],
                              "output": {
                                "data": [
                                  [
                                    {
                                      "name": "portfolio_name",
                                      "order": 0,
                                      "value": "102296_9",
                                      "dataType": "varchar"
                                    },
                                    {
                                      "name": "total_market_value",
                                      "order": 1,
                                      "value": 1887237400,
                                      "dataType": "real"
                                    }
                                  ]
                                ],
                                "text": "The top 3 portfolios ranked by their total market value as of the most recent date recorded are: Portfolio '102296_9' with a total market value of 1,887,237,400, Portfolio '103100_7' with a total market value of 6,269,447.5, and Portfolio '103271_3' with a total market value of 2,563,462.8.",
                                "query": "WITH LatestDate AS ( SELECT MAX(\"date\") AS \"latest_date\" FROM \"supabase\".\"public\".\"holdings\" ) SELECT h.\"portfolio_name\", SUM(h.\"ending_market_value\") AS \"total_market_value\" FROM \"supabase\".\"public\".\"holdings\" h JOIN LatestDate ld ON h.\"date\" = ld.\"latest_date\" GROUP BY h.\"portfolio_name\" ORDER BY \"total_market_value\" DESC LIMIT 5"
                              },
                              "message": "What are the top 3 portfolios ranked by their total market value as of the most recent date recorded?",
                              "modelParams": {
                                "modelName": "gpt-4o",
                                "temperature": 0
                              }
                            }
                          ],
                          "source": "API_KEY"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai-agent/workflow/png": {
      "get": {
        "tags": ["AI -- AgentV2"],
        "summary": "Get png image of current ai workflow",
        "operationId": "getWorkflowImage",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/ai-agent/{projectId}/chat": {
      "post": {
        "tags": ["AI -- AgentV2"],
        "summary": "Chat with agent",
        "operationId": "chat",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAgentChatRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai-agent/{projectId}/chat/stream": {
      "post": {
        "tags": ["AI -- AgentV2"],
        "summary": "Chat with agent via stream",
        "operationId": "chatStream",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAgentChatStreamRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerSentEventMapStringObject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai-agent/{projectId}/threads": {
      "get": {
        "tags": ["AI -- AgentV2"],
        "summary": "List ai-agent threads",
        "operationId": "listThreads",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai-agent/{projectId}/threads/{threadId}": {
      "get": {
        "tags": ["AI -- AgentV2"],
        "summary": "Get ai-agent thread",
        "operationId": "getThread",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["AI -- AgentV2"],
        "summary": "Update ai-agent thread display name",
        "operationId": "updateThread",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIAgentThreadUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["AI -- AgentV2"],
        "summary": "Delete ai-agent thread",
        "operationId": "deleteThread",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sql/transpile/{dialect}": {
      "post": {
        "tags": ["Data -- SQL"],
        "summary": "Transpile a sql query into given dialect",
        "operationId": "transpileSQL",
        "parameters": [
          {
            "name": "dialect",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SQLTranspileQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProjectRequest": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "example": "My Project"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text about the project",
            "example": "This is a project that does something"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Project ID"
          },
          "name": {
            "type": "string",
            "description": "Project name"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text about the project"
          },
          "domain": {
            "type": "string",
            "description": "Domain of the project"
          },
          "webhookBaseUrl": {
            "type": "string",
            "description": "Webhook base URL"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the project was created"
          },
          "owner": {
            "type": "string",
            "description": "The owner of the project"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace to which the project belongs"
          }
        },
        "description": "Project"
      },
      "WorkspaceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the workspace"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text about the workspace"
          }
        }
      },
      "Workspace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the workspace",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the workspace"
          },
          "createdBy": {
            "type": "string",
            "description": "The unique identifier of the user who created the workspace",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "The unique identifier of the organization to which the workspace belongs",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text about the workspace"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the workspace was created"
          },
          "defaultWorkspace": {
            "type": "boolean",
            "description": "Whether the workspace is the default workspace for the organization.\n\n\n This is a backward compatibility field in order to create projects in the default workspace if the workspace is not specified."
          }
        }
      },
      "MetadataAIUsageUpdateRequest": {
        "type": "object",
        "properties": {
          "useWithAI": {
            "type": "boolean"
          }
        }
      },
      "MetadataColumn": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string"
          },
          "columnDescription": {
            "type": "string"
          },
          "dataType": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "isNotNull": {
            "type": "boolean"
          },
          "isSystem": {
            "type": "boolean"
          },
          "isUnique": {
            "type": "boolean"
          },
          "isPrimary": {
            "type": "boolean"
          },
          "isCategorical": {
            "type": "boolean"
          },
          "categoricalValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lineage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataColumnLineage"
            }
          }
        }
      },
      "MetadataColumnLineage": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "column": {
            "type": "string"
          },
          "expression": {
            "type": "string"
          }
        }
      },
      "MetadataUpdateRequest": {
        "type": "object",
        "properties": {
          "tableDescription": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataColumn"
            }
          },
          "useWithAI": {
            "type": "boolean"
          }
        }
      },
      "MetadataUpdateRelationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "MetadataCategoricalColumnRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "frequency": {
            "type": "string"
          }
        }
      },
      "ColumnRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the column."
          },
          "dataType": {
            "type": "string",
            "description": "The data type of the column."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the column."
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the column."
          },
          "isNotNull": {
            "type": "boolean",
            "description": "The not null flag for the column."
          },
          "isUnique": {
            "type": "boolean",
            "description": "The unique flag for the column."
          }
        },
        "description": "This class represents a ColumnRequest.\n It contains the name, data type, display name, default value, not null and unique status of the column request."
      },
      "ColumnDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the column."
          },
          "name": {
            "type": "string",
            "description": "The name of the column."
          },
          "dataType": {
            "type": "string",
            "description": "The data type of the column."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the column."
          },
          "defaultValue": {
            "type": "string",
            "description": "The default value of the column."
          },
          "isNotNull": {
            "type": "boolean",
            "description": "The not null flag for the column."
          },
          "isUnique": {
            "type": "boolean",
            "description": "The unique flag for the column."
          }
        }
      },
      "QueryRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the query."
          },
          "inputQuery": {
            "type": "string",
            "description": "The sql query."
          },
          "queryType": {
            "type": "string",
            "description": "The type of the query:\n PLAIN or MATERIALIZED\n\n\n Default is PLAIN."
          },
          "schedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        }
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "The expression of the schedule.\n The expression is a duration in ISO-8601 format.\n \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)"
          }
        },
        "description": "This class represents a schedule for a materialized query."
      },
      "Query": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the query."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the query."
          },
          "name": {
            "type": "string",
            "description": "The name of the query.\n\n This is the name of the query which will be used in the sql query.\n e.g. SELECT * FROM \"peaka\".\"query\".\"<name>\""
          },
          "inputQuery": {
            "type": "string",
            "description": "The sql query."
          },
          "inputQueryRefId": {
            "type": "string",
            "description": "The reference id of the input query."
          },
          "queryType": {
            "type": "string",
            "description": "The type of the query:\n PLAIN or MATERIALIZED"
          },
          "schedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        }
      },
      "QueryFolderUpdateRequest": {
        "type": "object",
        "properties": {
          "queryIdsAdded": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "queryIdsRemoved": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "QueryFolderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64"
          },
          "modifiedAt": {
            "type": "integer",
            "format": "int64"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryFolderItem"
            }
          },
          "queryIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CacheSettingsUpdateRequest": {
        "type": "object",
        "properties": {
          "incrementalCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "fullRefreshCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        },
        "description": "This class represents a request to cache data.\n It contains the catalog ID, schema name, table name, and schedule of the cache request."
      },
      "Cache": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the cache."
          },
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog for the cache request."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema for the cache request."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table for the cache request."
          },
          "incrementalCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "fullRefreshCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "appId": {
            "type": "string",
            "writeOnly": true
          },
          "projectId": {
            "type": "string",
            "description": "The ID of the project for the cache request."
          }
        }
      },
      "ConnectionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the connection given by the user"
          },
          "type": {
            "type": "string",
            "description": "Type of connection.\n \n Example: airtable for AirTable, stripe for Stripe, hubspot_access_token for HubSpot (with Access Token), etc.\n\n Exact list can be fetched by following url: /connections/config"
          },
          "credential": {
            "type": "object",
            "additionalProperties": true,
            "description": "Credential object for the connection.\n\nIts structure is dependent on the connection type and can be fetched by following url: /connections/config\n"
          },
          "connectionCallback": {
            "type": "string",
            "description": "The url to redirect to after an oauth connection is established."
          }
        }
      },
      "Connection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Connection ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the connection"
          },
          "type": {
            "type": "string",
            "description": "Type of connection.\n\nExample: airtable for AirTable, stripe for Stripe, hubspot_access_token for HubSpot (with Access Token), etc.\n\nExact list can be fetched by following url: /connections/config\n"
          },
          "url": {
            "type": "string",
            "description": "Oauth callback url if the connection is Oauth based.\n"
          }
        }
      },
      "AIChatHistoryUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name for the AI chat thread."
          }
        },
        "description": "Represents a request to update AI chat history."
      },
      "AIAction": {
        "type": "object",
        "description": "Represents an action taken in a chat history step."
      },
      "AIChatHistory": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The unique identifier for the project."
          },
          "aiThreadId": {
            "type": "string",
            "description": "The unique identifier for the AI thread."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the chat history."
          },
          "tasks": {
            "type": "array",
            "description": "The list of tasks in the chat history.",
            "items": {
              "$ref": "#/components/schemas/AIChatHistoryTask"
            }
          },
          "source": {
            "type": "string",
            "description": "The source of the chat history."
          }
        },
        "description": "Represents the chat history associated with a project and AI thread."
      },
      "AIChatHistoryOutput": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "The structured data representing the chat history query results.",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AIChatHistoryQueryData"
              }
            }
          },
          "text": {
            "type": "string",
            "description": "The text response associated with the chat history."
          },
          "query": {
            "type": "string",
            "description": "The query string that was used in the chat."
          }
        },
        "description": "Represents the output of chat history, containing the query, response text,\n and structured data related to the query results."
      },
      "AIChatHistoryQueryData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name associated with the query data."
          },
          "order": {
            "type": "integer",
            "description": "The order of the data entry within the query results.",
            "format": "int32"
          },
          "value": {
            "type": "object",
            "description": "The value of the data entry."
          },
          "dataType": {
            "type": "string",
            "description": "The data type of the value."
          }
        },
        "description": "Represents a single data entry in a chat history query result."
      },
      "AIChatHistoryResponse": {
        "type": "object",
        "properties": {
          "history": {
            "type": "array",
            "description": "The list of AI chat history records.",
            "items": {
              "$ref": "#/components/schemas/AIChatHistory"
            }
          }
        },
        "description": "Represents the response containing AI chat history."
      },
      "AIChatHistoryStep": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AIAction"
          },
          "observation": {
            "type": "string",
            "description": "The observation resulting from the action."
          }
        },
        "description": "Represents a step in a chat history task, containing an action and its observation."
      },
      "AIChatHistoryTask": {
        "type": "object",
        "properties": {
          "step": {
            "type": "array",
            "description": "The list of steps in the task.",
            "items": {
              "$ref": "#/components/schemas/AIChatHistoryStep"
            }
          },
          "output": {
            "$ref": "#/components/schemas/AIChatHistoryOutput"
          },
          "message": {
            "type": "string",
            "description": "The message associated with the task."
          },
          "modelParams": {
            "type": "object",
            "additionalProperties": true,
            "description": "The model parameters used in the task."
          }
        },
        "description": "Represents a task in the chat history, which contains steps and output."
      },
      "AIAgentThreadUpdateRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The new name for the AI chat thread."
          }
        }
      },
      "InitSessionRequest": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The project ID."
          },
          "theme": {
            "type": "string",
            "description": "The theme to be used."
          },
          "themeOverride": {
            "type": "boolean",
            "description": "Flag indicating whether the theme should be overridden."
          },
          "timeoutInSeconds": {
            "type": "integer",
            "description": "The timeout duration in seconds.",
            "format": "int32"
          },
          "featureFlags": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "A map of feature flags, where the key is the feature name and the value indicates if it is enabled.\n Defined feature flags are:\n  - createDataInPeaka : Flag indicating whether the user can create data in Peaka.\n  - queries : Flag indicating whether the user can use query functions."
          }
        }
      },
      "EmbeddedSession": {
        "type": "object",
        "properties": {
          "sessionUrl": {
            "type": "string",
            "description": "The URL of the Embedded Peaka session to be followed.\n\nIt is a one-time use URL that will redirect the user to the Peaka session.\n"
          },
          "partnerOrigin": {
            "type": "string",
            "description": "The origin of the partner that the embedded studio is coming from.\n"
          }
        }
      },
      "SQLTranspileQueryRequest": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          }
        }
      },
      "ApiKeyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the API key"
          }
        }
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the API key"
          },
          "apiKey": {
            "type": "string",
            "description": "API key. It is a secret and should not be shared. Please store it securely. You will not be able to see it again."
          },
          "apiKeyId": {
            "type": "string",
            "description": "ID of the API key",
            "format": "uuid"
          }
        },
        "description": "Represents an API key."
      },
      "MetadataCreateSemanticsRequest": {
        "type": "object",
        "properties": {
          "threadId": {
            "type": "string"
          },
          "initialPrompt": {
            "type": "string"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MetadataAddRelationRequest": {
        "type": "object",
        "properties": {
          "targetCatalogId": {
            "type": "string"
          },
          "targetSchemaName": {
            "type": "string"
          },
          "targetTableName": {
            "type": "string"
          },
          "targetColumnName": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "MetadataRefreshMetadataRequest": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string"
          }
        }
      },
      "MetadataAddGoldenSqlRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string"
          },
          "sql": {
            "type": "string"
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog that the table belongs to."
          },
          "catalogName": {
            "type": "string",
            "description": "The name of the catalog that the table belongs to."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema that the table belongs to."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table."
          },
          "isCacheable": {
            "type": "boolean",
            "description": "Indicates whether the table is cacheable or not."
          },
          "isDynamicTable": {
            "type": "boolean",
            "description": "Indicates whether the table has required query parameter columns or not.\n A query parameter column is prefixed with \"_q_\" e.g. \"_q_date\".\n These columns are used to filter the data in the table."
          },
          "isCached": {
            "type": "boolean",
            "description": "Indicates whether the table is cached or not."
          }
        },
        "description": "Represents a table in a schema."
      },
      "ImportJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "progress": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "SemanticCatalogRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the catalog"
          }
        }
      },
      "Catalog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the catalog."
          },
          "name": {
            "type": "string",
            "description": "The name of the catalog."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the catalog."
          },
          "catalogType": {
            "type": "string",
            "description": "The type of the catalog."
          },
          "connectionId": {
            "type": "string",
            "description": "The connection ID of the catalog."
          }
        },
        "description": "This class represents a Catalog.\n It contains the id, name, display name, type, and connection ID of the catalog."
      },
      "SemanticTableRequest": {
        "type": "object",
        "properties": {
          "schemaName": {
            "type": "string",
            "description": "The name of the schema."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table."
          },
          "queryId": {
            "type": "string",
            "description": "The ID of the query which is used to populate the semantic table."
          }
        }
      },
      "SemanticTable": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog that the table belongs to."
          },
          "catalogName": {
            "type": "string",
            "description": "The name of the catalog that the table belongs to."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema that the table belongs to."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table."
          },
          "tableId": {
            "type": "string",
            "description": "The ID of the semantic table."
          }
        },
        "description": "Represents a table in a schema."
      },
      "CatalogShareRequest": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "description": "Target Project ID"
          }
        }
      },
      "QueryFolderCreateRequest": {
        "type": "object",
        "properties": {
          "folderName": {
            "type": "string"
          }
        }
      },
      "QueryExecuteRequest": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "from": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableForQuery"
            }
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "orderBy": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "TableForQuery": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "catalogName": {
            "type": "string"
          },
          "schemaName": {
            "type": "string"
          },
          "tableName": {
            "type": "string"
          }
        }
      },
      "CellValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the column."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the column."
          },
          "dataType": {
            "type": "string",
            "description": "The data type of the column."
          },
          "value": {
            "type": "string",
            "description": "The value of the column."
          },
          "order": {
            "type": "integer",
            "description": "The order of the column in its row.",
            "format": "int32"
          }
        },
        "description": "Represents a cell value in the query result."
      },
      "Column": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog for the column."
          },
          "catalogName": {
            "type": "string",
            "description": "The name of the catalog for the column."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema for the column."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table for the column."
          },
          "columnName": {
            "type": "string",
            "description": "The name of the column."
          }
        },
        "description": "This class represents a Column.\n It contains the catalog ID, catalog name, schema name, table name, and column name."
      },
      "QueryResult": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "description": "The columns of the query result.",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "data": {
            "type": "array",
            "description": "The data of the query result.",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CellValue"
              }
            }
          }
        },
        "description": "Represents the result of a query."
      },
      "CatalogRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the catalog"
          },
          "connectionId": {
            "type": "string",
            "description": "Connection ID.\n\nThis is the ID of the connection that is used to connect to the catalog.\n\nYou must create a connection before creating a catalog.\n"
          },
          "extraParameters": {
            "type": "object",
            "additionalProperties": true,
            "description": "Extra parameters for the catalog"
          }
        }
      },
      "ParametricTable": {
        "type": "object",
        "properties": {
          "fromSchema": {
            "type": "string",
            "description": "Schema of the base table"
          },
          "fromTable": {
            "type": "string",
            "description": "Name of the base table"
          },
          "toSchema": {
            "type": "string",
            "description": "Schema of the target table"
          },
          "toTable": {
            "type": "string",
            "description": "Name of the target table"
          },
          "paramValues": {
            "type": "array",
            "description": "List of parametric columns",
            "items": {
              "$ref": "#/components/schemas/ParametricTableColumn"
            }
          }
        }
      },
      "ParametricTableColumn": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Column name"
          },
          "value": {
            "type": "object",
            "description": "Column value"
          }
        },
        "description": "Parametric table column"
      },
      "CacheRequest": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog for the cache request."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema for the cache request."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table for the cache request."
          },
          "incrementalCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          },
          "fullRefreshCacheSchedule": {
            "$ref": "#/components/schemas/Schedule"
          }
        },
        "description": "This class represents a request to cache data.\n It contains the catalog ID, schema name, table name, and schedule of the cache request."
      },
      "CacheCreateStatus": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "error": {
            "type": "string"
          },
          "cache": {
            "$ref": "#/components/schemas/Cache"
          }
        }
      },
      "Oauth2Callback": {
        "type": "object",
        "properties": {
          "queryParameters": {
            "type": "string",
            "description": "Query parameters received from the Oauth2 redirection. Pass all query parameters as a single string.\n\n Example: \"https://yourdomain.com/oauth2/mycallback?code=1234&state=xyz&param1=value1&param2=value2\"\n\n \"queryParameters\": \"code=1234&state=xyz&param1=value1&param2=value2\""
          }
        }
      },
      "AIAgentTaskRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message content of the AI agent task request."
          },
          "threadId": {
            "type": "string",
            "description": "The optional thread ID associated with the AI chat thread.\n Can be used to track conversations within the same thread."
          },
          "source": {
            "type": "string",
            "description": "An optional source tag to categorize or tag the chat history."
          }
        },
        "description": "Represents a request for an AI agent task.\n This class holds the necessary information for processing an AI agent task,\n including the message content, an optional thread ID for tracking the AI chat thread,\n and an optional source tag for categorizing chat history."
      },
      "AIAgentTaskResponse": {
        "type": "object",
        "properties": {
          "threadId": {
            "type": "string",
            "description": "The thread ID associated with the AI chat thread.\n Can be used to track conversations within the same thread."
          },
          "output": {
            "$ref": "#/components/schemas/AIChatHistoryOutput"
          }
        }
      },
      "AIAgentChatRequestDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "threadId": {
            "type": "string"
          },
          "noExecute": {
            "type": "boolean"
          }
        }
      },
      "AIAgentChatStreamRequestDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "threadId": {
            "type": "string"
          },
          "noExecute": {
            "type": "boolean"
          },
          "streamModes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ServerSentEventMapStringObject": {
        "type": "object"
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the organization",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the organization"
          },
          "owner": {
            "type": "string",
            "description": "The unique identifier of the user who created the organization",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the organization was created"
          },
          "iconFileId": {
            "type": "string",
            "description": "The identifier of the file that contains the icon of the organization"
          },
          "description": {
            "type": "string",
            "description": "Descriptive text about the organization"
          }
        }
      },
      "MetadataRefreshJobStatusResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "NOT_ACTIVE",
              "COMPLETED",
              "WAITING",
              "ACTIVE",
              "DELAYED",
              "FAILED",
              "PAUSED",
              "STUCK"
            ]
          }
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog that the schema belongs to."
          },
          "catalogName": {
            "type": "string",
            "description": "The name of the catalog that the schema belongs to."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema."
          }
        }
      },
      "ColumnStatistics": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string",
            "description": "The name of the column."
          },
          "distinctFraction": {
            "type": "number",
            "description": "The estimated fraction of distinct values in a column compared to the total number of rows in the table. It helps in query optimization, statistics collection, and cardinality estimation in database systems.",
            "format": "double"
          }
        }
      },
      "TableStatistics": {
        "type": "object",
        "properties": {
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table."
          },
          "columnStatistics": {
            "type": "array",
            "description": "Statistics for each column in the table.",
            "items": {
              "$ref": "#/components/schemas/ColumnStatistics"
            }
          }
        }
      },
      "TableCacheResult": {
        "type": "object",
        "properties": {
          "isCached": {
            "type": "boolean",
            "description": "Indicates whether the table is cacheable or not."
          }
        }
      },
      "CacheActionRecord": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "action": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "cacheType": {
            "type": "string"
          },
          "isScheduled": {
            "type": "boolean"
          }
        }
      },
      "CacheExecutionInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "error": {
            "type": "object"
          },
          "progress": {
            "$ref": "#/components/schemas/CacheExecutionProgress"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "finishedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CacheExecutionProgress": {
        "type": "object",
        "properties": {
          "numberOfCachedRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfInsertedRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfUpdatedRecords": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfDeletedRecords": {
            "type": "integer",
            "format": "int32"
          },
          "lastOffset": {
            "type": "string"
          },
          "lastCacheTxId": {
            "type": "string"
          }
        }
      },
      "CacheStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the cache."
          },
          "status": {
            "type": "string",
            "description": "The status of the cache.\n RUNNING, CANCELLED, FAILED, COMPLETED, DELETED, NOT_INITIALIZED",
            "enum": [
              "RUNNING",
              "CANCELLED",
              "FAILED",
              "COMPLETED",
              "DELETED",
              "NOT_INITIALIZED"
            ]
          },
          "catalogId": {
            "type": "string",
            "description": "The ID of the catalog that the cache belongs to."
          },
          "schemaName": {
            "type": "string",
            "description": "The name of the schema that the cache belongs to."
          },
          "tableName": {
            "type": "string",
            "description": "The name of the table that the cache belongs to."
          },
          "lastIncrementalCacheExecution": {
            "$ref": "#/components/schemas/CacheExecutionInfo"
          },
          "lastFullRefreshCacheExecution": {
            "$ref": "#/components/schemas/CacheExecutionInfo"
          },
          "cacheActionLogs": {
            "type": "array",
            "description": "The list of cache action logs",
            "items": {
              "$ref": "#/components/schemas/CacheActionRecord"
            }
          },
          "appId": {
            "type": "string",
            "writeOnly": true
          },
          "projectId": {
            "type": "string",
            "description": "The ID of the project that the cache belongs to."
          }
        }
      },
      "ConnectionConfiguration": {
        "type": "object",
        "properties": {
          "connectionType": {
            "type": "string",
            "description": "The type of the connection. e.g. stripe, airtable, etc."
          },
          "connectionTypeLabel": {
            "type": "string",
            "description": "The label for the connection type."
          },
          "name": {
            "type": "string",
            "description": "The name of the connection."
          },
          "authorizationType": {
            "type": "string",
            "description": "The type of authorization used for the connection. e.g. oauth2, api_key, bearer_token, etc."
          },
          "credentialSchemaType": {
            "type": "string",
            "description": "The type of the credential schema used for the connection."
          },
          "redirectRequired": {
            "type": "boolean",
            "description": "Flag to indicate if the connection requires redirection to a 3rd party platform.\n\n e.g. OAuth2 connections often require redirection to the 3rd party platform for authorization.\n\n If this flag is set to true, the connection will be redirected to the 3rd party platform for authorization.\n\n According to your use case, some extra steps may be required to complete the authorization process.\n\n See: https://docs.peaka.com/how-to-guides/how-to-create-oauth2-based-connections-via-peaka"
          },
          "category": {
            "type": "string",
            "description": "The category of the connection."
          },
          "configuration": {
            "type": "array",
            "description": "The list of configuration fields for the connection.",
            "items": {
              "$ref": "#/components/schemas/ConnectionConfigurationItem"
            }
          },
          "documentationUrl": {
            "type": "string",
            "description": "The URL for the documentation of the connection."
          }
        }
      },
      "ConnectionConfigurationItem": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "The name of the field."
          },
          "fieldType": {
            "type": "string",
            "description": "The type of the field.",
            "enum": ["text", "number", "boolean"]
          },
          "required": {
            "type": "boolean",
            "description": "Indicates whether the field is required."
          },
          "description": {
            "type": "string",
            "description": "The description of the field."
          }
        },
        "description": "Represents a configuration field for a connection."
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "Use the Authorization header with the value 'Bearer <apiKey>' to authenticate. Partner API Keys have full access; Project API Keys are limited to their project scope. Learn more: https://docs.peaka.com/api-reference/authentication",
        "scheme": "bearer",
        "bearerFormat": "Api Key"
      }
    }
  }
}
